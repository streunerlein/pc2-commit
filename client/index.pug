html
  head
    title Client
    link(rel="stylesheet", href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css")
    style(type='text/css').
      .log table {
        font-size:80%;
      }
      .log table td {
        white-space:nowrap;
      }
      body {
        display:flex;
        flex-flow:column;
      }
      .navbar.top {
        margin-bottom:0;
      }
      .main {
        flex: 2;
        overflow: auto;
        display:flex;
      }
      .col {
        display:flex;
        flex-flow:column;
      }
      .col > div {
        flex-grow:1;
        display:flex;
      }
      .panel {
        flex-grow:1;
        margin:15px;
        display:flex;
        flex-flow:column;
      }
      .panel-body {
        flex: 2;
        overflow:auto;
      }

      .panel-body .table {
        table-layout:fixed;
      }

      .log {
        max-height:30%;
        overflow:auto;
      }

      .delivering {
        color:#ccc;
      }

      .delivered {
        color:green;
      }
  body
    .nav.navbar.top
      a.navbar-brand(href="#") 2-Phase-Commit Client
    .main
      .client.col
        .item
          .panel.panel-default
            .panel-heading
              h3.panel-title Client
                br
                small Your computer
            .panel-body(style="min-width:300px;")
              form#queryform
                .form-group
                  label(for='query') Query
                  textarea#query.form-control(cols=100, rows=3)
                    | node0 ADD 100
                    | node1 SUBTRACT 100
                button.btn.btn-default#execute Execute
              br
              form
                .form-group
                  label(id="delaylabel", for="delay")= 'Communication delay (' + config.commDelay + 'ms)'
                  input(type="range", min="0", step="500", max="5000", value=config.commDelay, list='delaysettings', id="delay")
                  datalist(id="delaysettings")
                    option 0
                    option 500
                    option 1000
                    option 1500
                    option 2000
                    option 2500
                    option 3000
                    option 3500
                    option 4000
                    option 4500
                    option 5000
            .panel-footer
      .coordinators.col
      .comms.col
        .item
          .panel.panel-default
            .panel-heading
              h3.panel-title Comm node0
            .panel-body#coordinatornode0
              
            .panel-footer
        .item
          .panel.panel-default
            .panel-heading
              h3.panel-title Comm node1
            .panel-body#coordinatornode1
              
            .panel-footer
      .nodes.col

    script(src='http://underscorejs.org/underscore-min.js')
    script(src="https://code.jquery.com/jquery-3.1.1.min.js")
    script(src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js")
    script(src="http://backbonejs.org/backbone-min.js")
    script(src='/socket.io/socket.io.js')
    script(src='/js/NodeModel.js')
    script(src='/js/NodePanel.js')
    script(src='/js/CommCollection.js')
    script(src='/js/CommPanel.js')
    script.
      var socket = io();
      var config = !{JSON.stringify(config)};

      _.each(config.nodes, function(node, nodename) {
        var model = new NodeModel(node);
        var panel = new NodePanel({
          el: $('<div class="item"></div>'),
          model: model
        });

        node.model = model;

        panel.render();
        $('.nodes').append(panel.$el);
      });

      var coordinator = new NodeModel(config.coordinator);
      var cPanel = new NodePanel({
        el: $('<div class="item"></div>'),
        model: coordinator,
        className: 'coordinator'
      });

      config.coordinator.model = coordinator;

      cPanel.render();
      $('.coordinators').append(cPanel.$el);


      var comms = {};
      comms[getCommCollection('', 'client')] = new CommCollection();

      _.each(config.nodes, function(node) {
        comms[getCommCollection('', node.id)] = new CommCollection();
      });

      new CommPanel({
        model: comms[getCommCollection('', 'node0')],
        el: document.querySelector('#coordinatornode0')
      });
      new CommPanel({
        model: comms[getCommCollection('', 'node1')],
        el: document.querySelector('#coordinatornode1')
      });

      socket.on('connect', function() {
        socket.emit('identify', 'client');
      });

      socket.on('configupdate', function(data) {
        // console.log(data);
      });

      function getCommCollection(partner1, partner2) {
        var other = partner2 === config.coordinator.id ? partner1 : partner2;
        return config.coordinator.id + '-' + other;
      }

      function routeMsgToComm(msg) {
        comms[getCommCollection(msg.from, msg.to)].add(msg, {merge: true});
      }

      // client/coordinator comm
      socket.on('transaction', routeMsgToComm);
      socket.on('OK', routeMsgToComm);
      socket.on('ERROR', routeMsgToComm);

      // coordinator/node comm
      socket.on('PREPARE', routeMsgToComm);
      socket.on('YES VOTE', routeMsgToComm);
      socket.on('NO VOTE', routeMsgToComm);
      socket.on('ACK', routeMsgToComm);
      socket.on('COMMIT', routeMsgToComm);
      socket.on('ABORT', routeMsgToComm);

      document.querySelector('#delay').addEventListener('change', function(e) {
        socket.emit('updatedelay', this.value);
      });

      document.querySelector('#delay').addEventListener('input', function(e) {
        document.querySelector('#delaylabel').innerHTML = 'Communication delay (' + this.value + 'ms)';
      });

      document.querySelector('#queryform').addEventListener('submit', function(e) {
        e.preventDefault();
        socket.emit('query', parseQuery(document.querySelector('#query').value));
      });

      function parseQuery(queryStr) {
        var lines = queryStr.split("\n").filter(function(l) { return l.length; });

        lines.forEach(validateQuery);
        queries = lines.map(function(line) { return line.split(" "); });
        return queries;
      }

      function validateQuery(line) {
        var parts = line.split(" ");
        var validQueries = [
          [isNode, equals('ADD'), isInteger],
          [isNode, equals('SUBTRACT'), isInteger],
          [isNode, equals('SET'), isInteger],
          [isNode, equals('GET')],
        ].filter(function(qS) { 
          return qS.length === parts.length;
        });

        var match = validQueries.find(function(qS) {
          return parts.every(function(val, ix) {
            return qS[ix](val);
          });
        });

        if (typeof match == 'undefined') {
          throw 'Invalid syntax';
        }

        function isInteger(str) { return (parseInt(str, 10) == str); }
        function isNode(str) { return Object.keys(config.nodes).indexOf(str) !== -1;}
        function equals(compareStr) { return function(str) { return compareStr === str; } }
      }